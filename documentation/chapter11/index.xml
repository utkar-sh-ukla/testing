<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Connection Pools and Data Sources on Pgjdbc</title>
    <link>http://localhost:1313/documentation/chapter11/</link>
    <description>Recent content in Connection Pools and Data Sources on Pgjdbc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jun 2022 22:46:55 +0530</lastBuildDate><atom:link href="http://localhost:1313/documentation/chapter11/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Connection Pools and Data Sources</title>
      <link>http://localhost:1313/documentation/chapter11/datasource/</link>
      <pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate>
      
      <guid>http://localhost:1313/documentation/chapter11/datasource/</guid>
      <description>JDBC 2 introduced standard connection pooling features in an add-on API known as the JDBC 2.0 Optional Package (also known as the JDBC 2.0 Standard Extension). These features have since been included in the core JDBC 3 API.
Overview The JDBC API provides a client and a server interface for connection pooling. The client interface is javax.sql.DataSource, which is what application code will typically use to acquire a pooled database connection.</description>
    </item>
    
    <item>
      <title>Application Servers ConnectionPoolDataSource</title>
      <link>http://localhost:1313/documentation/chapter11/ds-cpds/</link>
      <pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate>
      
      <guid>http://localhost:1313/documentation/chapter11/ds-cpds/</guid>
      <description>PostgreSQL™ includes one implementation of ConnectionPoolDataSource named org.postgresql.ds.PGConnectionPoolDataSource.
JDBC requires that a ConnectionPoolDataSource be configured via JavaBean properties, shown in Table 11.1, “ConnectionPoolDataSource Configuration Properties”, so there are get and set methods for each of these properties.
Table 11.1. ConnectionPoolDataSource Configuration Properties
database server is listening on (or 0 to use the default port) user STRING User used to make database connections password STRING Password used to make database connections ssl BOOLEAN If true, use SSL encrypted connections (default false) sslfactory STRING Custom javax.</description>
    </item>
    
    <item>
      <title>Applications DataSource</title>
      <link>http://localhost:1313/documentation/chapter11/ds-ds/</link>
      <pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate>
      
      <guid>http://localhost:1313/documentation/chapter11/ds-ds/</guid>
      <description>PostgreSQL™ includes two implementations of DataSource, as shown in Table 11.2, “DataSource Implementations”. One that does pooling and the other that does not. The pooling implementation does not actually close connections when the client calls the close method, but instead returns the connections to a pool of available connections for other clients to use. This avoids any overhead of repeatedly opening and closing connections, and allows a large number of clients to share a small number of database connections.</description>
    </item>
    
    <item>
      <title>Data Sources and JNDI</title>
      <link>http://localhost:1313/documentation/chapter11/jndi/</link>
      <pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate>
      
      <guid>http://localhost:1313/documentation/chapter11/jndi/</guid>
      <description>All the ConnectionPoolDataSource and DataSource implementations can be stored in JNDI. In the case of the nonpooling implementations, a new instance will be created every time the object is retrieved from JNDI, with the same settings as the instance that was stored. For the pooling implementations, the same instance will be retrieved as long as it is available (e.g., not a different JVM retrieving the pool from JNDI), or a new instance with the same settings created otherwise.</description>
    </item>
    
    <item>
      <title>Tomcat setup</title>
      <link>http://localhost:1313/documentation/chapter11/tomcat/</link>
      <pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate>
      
      <guid>http://localhost:1313/documentation/chapter11/tomcat/</guid>
      <description>Note The postgresql.jar file must be placed in $CATALINA_HOME/common/lib in both Tomcat 4 and 5.
The absolute easiest way to set this up in either tomcat instance is to use the admin web application that comes with Tomcat, simply add the datasource to the context you want to use it in.
Setup for Tomcat 4 place the following inside the &amp;lt;Context&amp;gt; tag inside conf/server.xml
&amp;lt;Resource name=&amp;#34;jdbc/postgres&amp;#34; scope=&amp;#34;Shareable&amp;#34; type=&amp;#34;javax.sql.DataSource&amp;#34;/&amp;gt; &amp;lt;ResourceParams name=&amp;#34;jdbc/postgres&amp;#34;&amp;gt; &amp;lt;parameter&amp;gt; &amp;lt;name&amp;gt;validationQuery&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;select version();&amp;lt;/value&amp;gt; &amp;lt;/parameter&amp;gt; &amp;lt;parameter&amp;gt; &amp;lt;name&amp;gt;url&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;jdbc:postgresql://localhost/davec&amp;lt;/value&amp;gt; &amp;lt;/parameter&amp;gt; &amp;lt;parameter&amp;gt; &amp;lt;name&amp;gt;password&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;davec&amp;lt;/value&amp;gt; &amp;lt;/parameter&amp;gt; &amp;lt;parameter&amp;gt; &amp;lt;name&amp;gt;maxActive&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;4&amp;lt;/value&amp;gt; &amp;lt;/parameter&amp;gt; &amp;lt;parameter&amp;gt; &amp;lt;name&amp;gt;maxWait&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;5000&amp;lt;/value&amp;gt; &amp;lt;/parameter&amp;gt; &amp;lt;parameter&amp;gt; &amp;lt;name&amp;gt;driverClassName&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;org.</description>
    </item>
    
  </channel>
</rss>
