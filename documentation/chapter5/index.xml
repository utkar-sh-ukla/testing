<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Issuing a Query and Processing the Result on Pgjdbc</title>
    <link>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/</link>
    <description>Recent content in Issuing a Query and Processing the Result on Pgjdbc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jun 2022 22:46:55 +0530</lastBuildDate><atom:link href="https://utkar-sh-ukla.github.io/testing/documentation/chapter5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Issuing a Query and Processing the Result</title>
      <link>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/query/</link>
      <pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate>
      
      <guid>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/query/</guid>
      <description>Any time you want to issue SQL statements to the database, you require a Statement or PreparedStatement instance. Once you have a Statement or PreparedStatement, you can use issue a query. This will return a ResultSet instance, which contains the entire result (see the section called “Getting results based on a cursor” here for how to alter this behaviour). Example 5.1, “Processing a Simple Query in JDBC” illustrates this process.</description>
    </item>
    
    <item>
      <title>Using the Statement or PreparedStatement Interface</title>
      <link>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/statement/</link>
      <pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate>
      
      <guid>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/statement/</guid>
      <description>The following must be considered when using the Statement or PreparedStatement interface:
 You can use a single Statement instance as many times as you want. You could create one as soon as you open the connection and use it for the connection&amp;rsquo;s lifetime. But you have to remember that only one ResultSet can exist per Statement or PreparedStatement at a given time. If you need to perform a query while processing a ResultSet, you can simply create and use another Statement.</description>
    </item>
    
    <item>
      <title>Using the ResultSet Interface</title>
      <link>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/resultset/</link>
      <pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate>
      
      <guid>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/resultset/</guid>
      <description>The following must be considered when using the ResultSet interface:
 Before reading any values, you must call next(). This returns true if there is a result, but more importantly, it prepares the row for processing. You must close a ResultSet by calling close() once you have finished using it. Once you make another query with the Statement used to create a ResultSet, the currently open ResultSet instance is closed automatically.</description>
    </item>
    
    <item>
      <title>Performing Updates</title>
      <link>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/update/</link>
      <pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate>
      
      <guid>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/update/</guid>
      <description>To change data (perform an INSERT, UPDATE, or DELETE) you use the executeUpdate() method. This method is similar to the method executeQuery() used to issue a SELECT statement, but it doesn&amp;rsquo;t return a ResultSet; instead it returns the number of rows affected by the INSERT, UPDATE, or DELETE statement. Example 5.3, “Deleting Rows in JDBC” illustrates the usage.
Example 5.3. Deleting Rows in JDBC
This example will issue a simple DELETE statement and print out the number of rows deleted.</description>
    </item>
    
    <item>
      <title>Creating and Modifying Database Objects</title>
      <link>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/ddl/</link>
      <pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate>
      
      <guid>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/ddl/</guid>
      <description>To create, modify or drop a database object like a table or view you use the execute() method. This method is similar to the method executeQuery(), but it doesn&amp;rsquo;t return a result. Example 5.4, “Dropping a Table in JDBC illustrates the usage.
Example 5.4. Dropping a Table in JDBC
This example will drop a table.
Statement st = conn.createStatement(); st.execute(&amp;#34;DROP TABLE mytable&amp;#34;); st.close(); </description>
    </item>
    
    <item>
      <title>Using Java 8 Date and Time classes</title>
      <link>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/java8-date-time/</link>
      <pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate>
      
      <guid>https://utkar-sh-ukla.github.io/testing/documentation/chapter5/java8-date-time/</guid>
      <description>The PostgreSQL™ JDBC driver implements native support for the Java 8 Date and Time API (JSR-310) using JDBC 4.2.
Table 5.1. Supported Java 8 Date and Time classes
This is closely aligned with tables B-4 and B-5 of the JDBC 4.2 specification. Note that ZonedDateTime, Instant and OffsetTime / TIME WITH TIME ZONE are not supported. Also note that all OffsetDateTime instances will have be in UTC (have offset 0). This is because the backend stores them as UTC.</description>
    </item>
    
  </channel>
</rss>
