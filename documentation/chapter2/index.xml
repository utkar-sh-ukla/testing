<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Setting up the JDBC Driver on Pgjdbc</title><link>https://utkar-sh-ukla.github.io/testing/documentation/chapter2/</link><description>Recent content in Setting up the JDBC Driver on Pgjdbc</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Jun 2022 22:46:55 +0530</lastBuildDate><atom:link href="https://utkar-sh-ukla.github.io/testing/documentation/chapter2/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a Database</title><link>https://utkar-sh-ukla.github.io/testing/documentation/chapter2/your-database/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://utkar-sh-ukla.github.io/testing/documentation/chapter2/your-database/</guid><description>When creating a database to be accessed via JDBC it is important to select an appropriate encoding for your data. Many other client interfaces do not care what data you send back and forth, and will allow you to do inappropriate things, but Java makes sure that your data is correctly encoded. Do not use a database that uses the SQL_ASCII encoding. This is not a real encoding and you will have problems the moment you store data in it that does not fit in the seven bit ASCII character set.</description></item><item><title>Preparing the Database Server for JDBC</title><link>https://utkar-sh-ukla.github.io/testing/documentation/chapter2/prepare/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://utkar-sh-ukla.github.io/testing/documentation/chapter2/prepare/</guid><description>Out of the box, Java does not support unix sockets so the PostgreSQL server must be configured to allow TCP/IP connections. Starting with server version 8.0 TCP/IP connections are allowed from localhost. To allow connections to other interfaces than the loopback interface, you must modify the postgresql.conf file&amp;rsquo;s listen_addresses setting.
Once you have made sure the server is correctly listening for TCP/IP connections the next step is to verify that users are allowed to connect to the server.</description></item><item><title>Setting up the Class Path</title><link>https://utkar-sh-ukla.github.io/testing/documentation/chapter2/classpath/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://utkar-sh-ukla.github.io/testing/documentation/chapter2/classpath/</guid><description>To use the driver, the JAR archive named postgresql-MM.nn.pp.jar needs to be included in the class path, either by putting it in the CLASSPATH environment variable, or by using flags on the java command line.
For instance, assume we have an application that uses the JDBC driver to access a database, and that application is installed as /usr/local/lib/myapp.jar. The PostgreSQL™ JDBC driver installed as /usr/local/pgsql/share/java/postgresql-MM.nn.pp.jar. To run the application, we would use:</description></item><item><title>Setting up the JDBC Driver</title><link>https://utkar-sh-ukla.github.io/testing/documentation/chapter2/setup/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://utkar-sh-ukla.github.io/testing/documentation/chapter2/setup/</guid><description>This section describes the steps you need to take before you can write or run programs that use the JDBC interface.
Getting the Driver Precompiled versions of the driver can be downloaded from the PostgreSQL™ JDBC web site.
Alternatively you can build the driver from source, but you should only need to do this if you are making changes to the source code. To build the JDBC driver, you need gradle and a JDK (currently at least jdk1.</description></item></channel></rss>